package es.plexus.cedei.practicaExtra;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;




public class Main  {
	
	static String[] x;
	private static ArrayList<Votos> listavotos = new ArrayList<Votos>();
	private static ArrayList<Votos> listavotoscontados = new ArrayList<Votos>();
	private static ArrayList<Votos> listavotoscontadosunicos = new ArrayList<Votos>();
	static ArrayList<Votos> listaCopiada;
	static HashMap<String, Integer> hmap = new HashMap<String, Integer>();
	private static ArrayList<String> listanombres = new ArrayList<String>();
	static HashSet hs = new HashSet<Votos>();
	static SortedMap map = new TreeMap();

	static int[] numeros;
	static Integer cont = 0;
	static int start = 0;
	


	
	
    public static void main( String[] args )
    {
    		leer_fichero();   		
    		contar_votos();
    		mostrar_votos();
    		mostrar_graficos();
    		mostrar_ordenadomayor();
//    		Ventana V = new Ventana();      // creamos una ventana
//    	    V.setVisible(true); 
    }

  
    
    public static void mostrar_graficos() {
    	
    	
    	DefaultPieDataset dataset = new DefaultPieDataset();
    	
    	Set set2 = hmap.entrySet();
		 Iterator iterator2 = set2.iterator();
	      while(iterator2.hasNext()) {
	          Map.Entry mentry2 = (Map.Entry)iterator2.next();
	          dataset.setValue((String)mentry2.getKey(), (Integer)mentry2.getValue());
	          //System.out.print("Nombre: "+mentry2.getKey() + " Y su numero de votos es: " + mentry2.getValue()+"\n");
	          
	       }
    	
    	
    	
    	JFreeChart chart = ChartFactory.createPieChart("Grafico de nominaciones", dataset, true, true, true);
		
		ChartFrame cf = new ChartFrame("Graficos estadistico", chart);
		
		cf.pack();
		cf.setLocationRelativeTo(null);
		cf.setVisible(true);
    }
    
   public static void mostrar_votos() {
	   Set set2 = hmap.entrySet();
		 Iterator iterator2 = set2.iterator();
	      while(iterator2.hasNext()) {
	          Map.Entry mentry2 = (Map.Entry)iterator2.next();
	          System.out.print("Nombre: "+mentry2.getKey() + " Y su numero de votos es: " + mentry2.getValue()+"\n");
	          
	       }
   }
   
   public static void mostrar_ordenadomayor() {
	   Iterator iterator = map.keySet().iterator();
	   while (iterator.hasNext()) {
	   Object key = iterator.next();
	   System.out.println("Clave : " + key + " Valor :" + map.get(key));
	   }
   }
    
    public static void contar_votos() {
    	    	
    	
    	for(int i=0; i < listavotos.size();++i) {
    		
    		for(int j=0; j< listavotos.size();++j) {
    			
    			if(listavotos.get(i).getNombre().equals(listavotos.get(j).getNombre())) {
    				listavotos.get(i).setCont();
    			
    			}
    		}
    		System.out.println("El participante: "+ listavotos.get(i).getNombre()+" tiene: "+ listavotos.get(i).getCont() + " votos");
    		hmap.put(listavotos.get(i).getNombre(), listavotos.get(i).getCont());
    		map.put(listavotos.get(i).getNombre(), listavotos.get(i).getCont());
    		cont=0;
    	}
    	 
    }
    
    
   
    
    public static void leer_fichero() {
		
    	String fichero = "";	
		try {
		      FileReader fr = new FileReader("C:\\Users\\Usuario\\eclipse-workspace\\practicaextra\\fichero\\nominaciones.txt");
		      BufferedReader br = new BufferedReader(fr);
		 
		      String linea;

		      while((linea = br.readLine()) != null) {
		    	   Votos v = new Votos();
		    	  
		    	  
		    	  x = linea.split(";"); //guardamos en el array
		    	 System.out.println(x[0]);
		    	 System.out.println(x[1]);
		    	 v.setNombre(x[0]);
		    	 v.setNominacion(x[1]);
		    	 listavotos.add(v);
		    	 listanombres.add(x[0]);
		    	 	
		      }
		   		      
		      fr.close();
		    }
		    catch(Exception e) {
		      System.out.println("Excepcion leyendo fichero "+ fichero + ": " + e);
		    }
    }
    
    
    
    
    
	public static void mostrar_nominados() {
		
		for(int i = 0 ; i < listavotos.size(); ++i) {
			listavotos.get(i).mostrar_nominaciones();
		}
		System.out.println("Total de votos en el listado: " +  listavotos.size());
	}

    
//  public static void contar_votos() {
//  	
//  	numeros = new int[listavotos.size()];
//  	
//  	for(int i = 0 ; i < listavotos.size(); ++i) {
//			//System.out.println(listavotos.get(i).getNominacion());
//			String sSubCadena = listavotos.get(i).getNominacion().substring(10,11);
//			int aux = Integer.parseInt(sSubCadena);
//			numeros[i] = aux;
//			//System.out.println(sSubCadena);
//			
//		}
//  
//  	int i, j;
//  	int indice;
//  	
//  	i = numeros.length - 1;
//  	
//  	while(i > 0 ) {
//  		indice = 0;
//  		for(j=0; j< i ;++j) {
//  			if(numeros[j+1]  <  numeros[j]) {
//  				int aux = numeros[j];
//  				numeros[j]= numeros[j+1];
//  				indice = j;
//  			}
//  			i = indice;
//  		}
//  	}
//  	
//  }
	
	
	
	
	
	
//public void showGraphic(List<Nominacion> listaNominaciones, List<Nominacion> listaResultados) {
//		
//		listaResultados.clear();
//		
//		List<String> listaNombres = new ArrayList<String>(new HashSet<>(listaNominaciones.stream().map(Nominacion::getNombre).collect(Collectors.toList())));
//		
//		for(String ln : listaNombres) {
//			
//			for(Nominacion nl : listaNominaciones) {
//				
//				if(ln.equalsIgnoreCase(nl.getNombre())) {
//					
//					resultado = resultado + nl.getNominacion();
//					
//				}
//				
//			}
//			
//			Nominacion n = new Nominacion(ln, resultado);
//			
//			listaResultados.add(n);
//			
//			resultado = 0;
//			
//		}
//		
//		for(Nominacion lr : listaResultados) {
//			
//			dataset.setValue(lr.getNombre(), lr.getNominacion());
//			
//		}
//		
//		JFreeChart chart = ChartFactory.createPieChart("Lista de nominaciones", dataset, true, true, true);
//		
//		ChartFrame cf = new ChartFrame("Graficos estadistico", chart);
//		
//		cf.pack();
//		cf.setLocationRelativeTo(null);
//		cf.setVisible(true);
//		
//	}
}

